'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntercomAPI = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var IntercomAPI = exports.IntercomAPI = canUseDOM && window.Intercom || function () {
  console.warn('Intercom not initialized yet');
};

var Intercom = (function (_Component) {
  _inherits(Intercom, _Component);

  function Intercom(props) {
    _classCallCheck(this, Intercom);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Intercom).call(this, props));

    var appID = props.appID || props.app_id;

    if (!appID || !canUseDOM) {
      return _possibleConstructorReturn(_this);
    }

    if (!window.Intercom) {
      (function (w, d, id, s, x) {
        function i() {
          i.c(arguments);
        }
        i.q = [];
        i.c = function (args) {
          i.q.push(args);
        };
        w.Intercom = i;
        s = d.createElement('script');
        s.onload = function () {
          exports.IntercomAPI = IntercomAPI = window.Intercom;
        };
        s.async = 1;
        s.src = 'https://widget.intercom.io/widget/' + id;
        x = d.getElementsByTagName('script')[0];
        x.parentNode.insertBefore(s, x);
      })(window, document, appID);
    };

    window.intercomSettings = _extends({}, props, { app_id: appID });

    if (window.Intercom) {
      window.Intercom('boot', props);
    }
    return _this;
  }

  _createClass(Intercom, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var appID = nextProps.appID || nextProps.app_id;

      if (!canUseDOM) return;

      window.intercomSettings = _extends({}, nextProps, { app_id: appID });
      window.Intercom('update', nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!canUseDOM) return false;

      window.Intercom('shutdown');

      delete window.Intercom;
    }
  }, {
    key: 'render',
    value: function render() {
      return false;
    }
  }]);

  return Intercom;
})(_react.Component);

Intercom.propTypes = {
  appID: _react.PropTypes.string,
  app_id: _react.PropTypes.string
};
Intercom.displayName = 'Intercom';
exports.default = Intercom;